// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  firstName           String
  lastName            String
  isRecruiter         Boolean
  registeredAt        DateTime              @default(now())
  profilePicUrl       String
  Job                 Job[]
  JobsApplied         JobsApplied[]
  InterviewBotMessage InterviewBotMessage[]
  CandidateProfile    CandidateProfile[]
}

model CandidateProfile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  user User   @relation(fields: [id], references: [id])

  professionalSummary String?

  experienceTitle       String?
  experienceCompany     String?
  experienceLocation    String?
  experienceDates       String?
  experienceDescription String?

  educationSchoolName  String?
  educationDegree      String?
  educationDates       String?
  educationDescription String?

  skills String?

  volunteerWork String?

  awardsCertifications String?

  coverLetter String?
}

model Job {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  location            String
  company             String
  companyLogo         String
  salary              String
  postedAt            DateTime              @default(now())
  postedBy            User                  @relation(fields: [postedById], references: [id])
  postedById          String                @db.ObjectId
  JobsApplied         JobsApplied[]
  categories          String[]
  InterviewBotMessage InterviewBotMessage[]
}

model JobsApplied {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId     String   @db.ObjectId
  userId    String   @db.ObjectId
  appliedAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([jobId, userId])
}

enum Role {
  user
  assistant
  system
}

model InterviewBotMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  role      Role
  createdAt DateTime
  jobId     String   @db.ObjectId
  userId    String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
