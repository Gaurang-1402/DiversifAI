// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  firstName     String
  lastName      String
  isRecruiter   Boolean
  registeredAt  DateTime      @default(now())
  profilePicUrl String
  Job           Job[]
  JobsApplied   JobsApplied[]
  interviewBotMessages InterviewBotMessage[] 
}

model Job {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  salary      String
  postedAt    DateTime      @default(now())
  postedBy    User          @relation(fields: [postedById], references: [id])
  postedById  String        @db.ObjectId
  JobsApplied JobsApplied[]
  interviewBotMessages InterviewBotMessage[]
}

model JobsApplied {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId     String   @db.ObjectId
  userId    String   @db.ObjectId
  appliedAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([jobId, userId])
}


model InterviewBotMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  role      String   // "AI" or "user"
  createdAt DateTime @default(now())
  jobId     String?  @db.ObjectId
  userId    String?  @db.ObjectId
  job       Job?     @relation(fields: [jobId], references: [id], name: "JobInterviewBotMessages")
  user      User?    @relation(fields: [userId], references: [id], name: "UserInterviewBotMessages")
  @@index([jobId], name: "indexInterviewBotMessageOnJobId")
  @@index([userId], name: "indexInterviewBotMessageOnUserId")
}
